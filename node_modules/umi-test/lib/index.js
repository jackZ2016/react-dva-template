"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _jestCli = _interopRequireDefault(require("jest-cli"));

var _path = require("path");

var _fs = require("fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const debug = require('debug')('umi-test');

process.env.NODE_ENV = 'test';

function test(path) {
  return (0, _fs.existsSync)(path) && (0, _fs.statSync)(path).isDirectory();
}

function _default(opts = {}) {
  const watch = opts.watch,
        coverage = opts.coverage,
        _opts$libraryName = opts.libraryName,
        libraryName = _opts$libraryName === void 0 ? 'umi' : _opts$libraryName,
        _opts$cwd = opts.cwd,
        cwd = _opts$cwd === void 0 ? process.cwd() : _opts$cwd;
  let pagesPath = 'pages';

  if (test((0, _path.join)(cwd, 'src/page'))) {
    pagesPath = 'src/page';
  }

  if (test((0, _path.join)(cwd, 'src/pages'))) {
    pagesPath = 'src/pages';
  }

  const config = _extends({
    rootDir: process.cwd(),
    setupFiles: [require.resolve('./shim.js'), require.resolve('./setupTests.js')],
    transform: {
      '\\.jsx?$': require.resolve('./transformers/jsTransformer'),
      '\\.tsx?$': require.resolve('./transformers/tsTransformer')
    },
    testMatch: ['**/?(*.)(spec|test|e2e).(j|t)s?(x)'],
    moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx'],
    setupTestFrameworkScriptFile: require.resolve('./jasmine'),
    moduleNameMapper: {
      '\\.(css|less|sass|scss)$': require.resolve('identity-obj-proxy')
    },
    globals: {
      'ts-jest': {
        useBabelrc: true
      }
    }
  }, coverage ? {
    collectCoverageFrom: ['pages/**/*.{ts,tsx,js,jsx', 'src/**/*.{ts,tsx,js,jsx}', '!**/*.d.ts'],
    collectCoverage: true,
    coveragePathIgnorePatterns: [`/${pagesPath}/.${libraryName}/`, `/${pagesPath}/.${libraryName}-production/`]
  } : {});

  return new Promise((resolve, reject) => {
    _jestCli.default.runCLI({
      watch,
      testPathPattern: process.argv.slice(2).filter(arg => !arg.startsWith('-')),
      config: JSON.stringify(config)
    }, [cwd]).then(result => {
      debug(result);
      const results = result.results; // const success = results.every(result => result.success);

      if (results.success) {
        resolve();
      } else {
        reject(new Error('Jest failed'));
      }
    }).catch(e => {
      console.log(e);
    });
  });
}